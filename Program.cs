using System.Reflection;
using System.Security.Claims;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc.Authorization;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Any;
using Microsoft.OpenApi.Interfaces;
using Microsoft.OpenApi.Models;
using OpenIddict.Abstractions;
using OpenIddict.Server.AspNetCore;
using OpenIddict.Validation.AspNetCore;
using WebApiDocumentationExample;
using WebApiDocumentationExample.Auth;
using WebApiDocumentationExample.Controllers;
using WebApiDocumentationExample.Models;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers(options =>
{
    var authPolicy = new AuthorizationPolicyBuilder
        {
            // To validate tokens received by custom API endpoints, the OpenIddict validation handler
            // (e.g OpenIddictValidationAspNetCoreDefaults.AuthenticationScheme
            //   or OpenIddictValidationOwinDefaults.AuthenticationType) must be used instead.
            AuthenticationSchemes = new List<string>{ OpenIddictValidationAspNetCoreDefaults.AuthenticationScheme }
        }
        .RequireAuthenticatedUser()
        .Build();
    options.Filters.Add(new AuthorizeFilter(authPolicy));
});
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1",
        new OpenApiInfo
        {
            Title = "Swagger Weather Demo Documentation",
            Version = "v1",
            Description = "This is a demo to see how documentation can be generated by using Swagger + ReDoc.",
            Contact = new OpenApiContact
            {
                Name = "Nikolay Krondev",
                Email = "email@example.com"
            },
            // ReDoc logo
            Extensions = new Dictionary<string, IOpenApiExtension>
            {
                {"x-logo", new OpenApiObject
                    {
                        {"url", new OpenApiString("https://avatars.githubusercontent.com/u/5111043?v=4")},
                        { "altText", new OpenApiString("Some cool logo")}
                    }
                }
            }
        });
    
    // xml documentation for swagger
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    options.IncludeXmlComments(xmlPath);
    options.EnableAnnotations();

// WORKING BASIC:    
    // options.AddSecurityDefinition("basic", new OpenApiSecurityScheme  
    // {  
    //     Name = "Authorization",  
    //     Type = SecuritySchemeType.Http,  
    //     Scheme = "basic",  
    //     In = ParameterLocation.Header,  
    //     Description = "Basic Authorization header using the Bearer scheme."  
    // });  
    //
    // options.AddSecurityRequirement(new OpenApiSecurityRequirement  
    // {  
    //     {  
    //         new OpenApiSecurityScheme  
    //         {  
    //             Reference = new OpenApiReference  
    //             {  
    //                 Type = ReferenceType.SecurityScheme,  
    //                 Id = "basic"  
    //             }  
    //         },  
    //         new string[] {}  
    //     }  
    // }); 


// WORKING JWT BEARER:
    options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "JWT Authorization header using the Bearer scheme."
    });
    options.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            Array.Empty<string>()
        }
    });
});

builder.Services.AddScoped<IUserService, UserService>();
builder.Services.AddSingleton<JwtAuthenticationManager>();

// Basic:
// builder.Services.AddAuthentication("BasicAuthentication")  
//     .AddScheme<AuthenticationSchemeOptions, BasicAuthenticationHandler>("BasicAuthentication", null);

builder.Services.AddAuthentication();

builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("OnlyAdmin", policy =>
    {
        policy.AuthenticationSchemes.Add(OpenIddictValidationAspNetCoreDefaults.AuthenticationScheme);
        policy.RequireAuthenticatedUser();
        policy.RequireRole(UserRoles.ADMIN.ToString());
        // policy.Requirements.Add(new CustomRequirement());
    });
    options.AddPolicy("RegularUser", policy =>
    {
        policy.AuthenticationSchemes.Add(OpenIddictValidationAspNetCoreDefaults.AuthenticationScheme);
        policy.RequireAuthenticatedUser();
        policy.RequireRole(UserRoles.USER.ToString(), UserRoles.ADMIN.ToString());
        // policy.RequireScope2(Scopes.SomeScope);
    });
});

builder.Services.AddDbContext<ApplicationDbContext>(options =>
{
    options
        .UseInMemoryDatabase("AuthenticationExample")
        .UseOpenIddict();
});

builder.Services.AddOpenIddict(openIddictBuilder =>
{
    openIddictBuilder.AddCore(options =>
        {
            options.UseEntityFrameworkCore()
                 .UseDbContext<ApplicationDbContext>();
        })
        .AddServer(options =>
        {
            // Enable the token endpoint.
            options.SetTokenEndpointUris("/authtoken");
            
            // Enable the client credentials and password flow.
            options.AllowClientCredentialsFlow();
            options.AllowPasswordFlow();
#if DEBUG
            // Register the signing and encryption credentials.
            options.AddDevelopmentEncryptionCertificate()
                .AddDevelopmentSigningCertificate();
#else
#endif
            // Register the ASP.NET Core host and configure the ASP.NET Core options.
            options.UseAspNetCore()
                .EnableUserinfoEndpointPassthrough()
                .EnableAuthorizationEndpointPassthrough()
                .EnableTokenEndpointPassthrough();
            
        })

        // Register the OpenIddict validation components.
        .AddValidation(options =>
        {
            // Import the configuration from the local OpenIddict server instance.
            options.UseLocalServer();
            options.UseAspNetCore();
        });

});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(options => options.SwaggerEndpoint("/swagger/v1/swagger.json", "Swagger Weather Demo Documentation v1"));
    
    app.UseReDoc(options => // adds default url to https://your-host-and-port/api-docs/
    {
        options.DocumentTitle = "Swagger Weather Demo Documentation";
        options.SpecUrl = "/swagger/v1/swagger.json";
    });
}

app.UseHttpsRedirection();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.MapPost("/authtoken",
    async (HttpRequest httpRequest, IOpenIddictApplicationManager applicationManager,
        IUserService userService, IAuthenticationSchemeProvider authenticationSchemeProvider) =>
{
    var schemes = await authenticationSchemeProvider.GetAllSchemesAsync();
    
    var request = httpRequest.HttpContext.GetOpenIddictServerRequest();
    if (!request.IsClientCredentialsGrantType() && !request.IsPasswordGrantType())
    {
        throw new NotImplementedException("The specified grant is not implemented.");
    }

    var (isValid, user) = userService.ValidateUser(request.Username, request.Password);
    if (!isValid)
    {
        return Results.BadRequest("User was not found or wrong password");
    }

    var application = await applicationManager.FindByClientIdAsync(request.ClientId) ??
                      throw new InvalidOperationException("The application cannot be found.");

    var identity = new ClaimsIdentity(TokenValidationParameters.DefaultAuthenticationType, OpenIddictConstants.Claims.Name, OpenIddictConstants.Claims.Role);

    identity.AddClaim(OpenIddictConstants.Claims.Subject,
        await applicationManager.GetClientIdAsync(application),
        OpenIddictConstants.Destinations.AccessToken, OpenIddictConstants.Destinations.IdentityToken);

    identity.AddClaim(OpenIddictConstants.Claims.Name,
        await applicationManager.GetDisplayNameAsync(application),
        OpenIddictConstants.Destinations.AccessToken, OpenIddictConstants.Destinations.IdentityToken);

    identity.AddClaim(OpenIddictConstants.Claims.Username, user.UserName,
        OpenIddictConstants.Destinations.AccessToken, OpenIddictConstants.Destinations.IdentityToken);

    identity.AddClaim(OpenIddictConstants.Claims.Role, user.Role.ToString(),
        OpenIddictConstants.Destinations.AccessToken, OpenIddictConstants.Destinations.IdentityToken);

    return Results.SignIn(new ClaimsPrincipal(identity),
        properties: new AuthenticationProperties(),
        authenticationScheme: OpenIddictServerAspNetCoreDefaults.AuthenticationScheme
        );
});

await ConfigureOAuthDatabase(app);

await app.RunAsync();

async Task ConfigureOAuthDatabase(IHost webApplication)
{
    await using var scope = webApplication.Services.CreateAsyncScope();
    var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
    await context.Database.EnsureCreatedAsync();
    var manager = scope.ServiceProvider.GetRequiredService<IOpenIddictApplicationManager>();
    const string clientId = "stream";
    if (await manager.FindByClientIdAsync(clientId) is null)
    {
        await manager.CreateAsync(new OpenIddictApplicationDescriptor
        {
            ClientId = clientId,
            //ClientSecret = "388D45FA-B36B-4988-BA59-B187D329C207",
            DisplayName = "My client application",
            Permissions =
            {
                OpenIddictConstants.Permissions.Endpoints.Token,
                OpenIddictConstants.Permissions.GrantTypes.ClientCredentials,
                OpenIddictConstants.Permissions.GrantTypes.Password
            }
        });
    }
}